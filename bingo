package isu;

import javax.swing.*;
import javax.swing.Timer;

import java.awt.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Set;
import java.util.HashSet;

public class BingoGame extends JFrame {
    private static final int SIZE = 5;
    private JButton[][] buttons = new JButton[SIZE][SIZE];
    private boolean[][] marked = new boolean[SIZE][SIZE];
    private Set<Integer> calledNumbers = new HashSet<>();
    private final String[] headers = {"B", "I", "N", "G", "O"};
    private int[][] numbers = new int[SIZE][SIZE];
    private Timer autoCaller;
    private boolean gameOver = false;
    private JButton[] headerButtons = new JButton[SIZE];
    private JButton statusButton = new JButton("Waiting for first call...");
    private JButton bingoButton = new JButton("BINGO!");

    // Game speed presets (milliseconds)
    private static final int SPEED_BINGO = 2000;
    private static final int NORMAL_BINGO = 5000;
    private static final int TURTLE_BINGO = 8000;

    public BingoGame() {
        super("Bingo Game");

        // Ask for speed before continuing
        int interval = promptForSpeed();
        if (interval == -1) {
            System.exit(0);
        }

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(688, 900);
        setLayout(new BorderLayout());

        JPanel boardPanel = new JPanel(new GridLayout(SIZE + 1, SIZE)); // +1 for header row
        initializeBoard(boardPanel);

        JPanel controlPanel = new JPanel(new BorderLayout());
        statusButton.setFont(new Font("Arial", Font.BOLD, 20));
        statusButton.setEnabled(false);

        bingoButton.setFont(new Font("Arial", Font.BOLD, 26));
        bingoButton.setBackground(Color.ORANGE);
        bingoButton.setFocusPainted(false);
        bingoButton.addActionListener(e -> handleBingoPress());

        controlPanel.add(statusButton, BorderLayout.CENTER);
        controlPanel.add(bingoButton, BorderLayout.EAST);

        add(boardPanel, BorderLayout.CENTER);
        add(controlPanel, BorderLayout.SOUTH);

        // Start the auto-caller with selected interval
        autoCaller = new Timer(interval, e -> callNumber());
        autoCaller.setInitialDelay(0);
        autoCaller.start();

        setVisible(true);
    }

    private int promptForSpeed() {
        String[] options = {"Speed Bingo (2s)", "Normal (5s)", "Turtle Style (8s)"};
        int choice = JOptionPane.showOptionDialog(
                null,
                "Choose your Bingo speed:",
                "Bingo Speed",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]
        );
        if (choice == 0) return SPEED_BINGO;
        if (choice == 1) return NORMAL_BINGO;
        if (choice == 2) return TURTLE_BINGO;
        return -1;
    }

    private void initializeBoard(JPanel boardPanel) {
        // Add column header buttons
        for (int col = 0; col < SIZE; col++) {
            JButton btn = new JButton(headers[col]);
            btn.setFont(new Font("Arial", Font.BOLD, 26));
            btn.setEnabled(false);
            headerButtons[col] = btn;
            boardPanel.add(btn);
        }

        // For each column, generate unique numbers within the Bingo range
        List<Integer>[] columnNumbers = new ArrayList[SIZE];
        for (int col = 0; col < SIZE; col++) {
            columnNumbers[col] = new ArrayList<>();
            int start = col * 15 + 1;
            for (int i = start; i < start + 15; i++) columnNumbers[col].add(i);
            Collections.shuffle(columnNumbers[col]);
        }

        // Fill the board DOWN each column
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                JButton btn;
                if (row == 2 && col == 2) {
                    // Center free space
                    btn = new JButton("FREE");
                    btn.setBackground(Color.GREEN);
                    marked[row][col] = true;
                    numbers[row][col] = 0;
                } else {
                    int number = columnNumbers[col].remove(0);
                    numbers[row][col] = number;
                    btn = new JButton(String.valueOf(number));
                }
                final int r = row, c = col;
                btn.setFont(new Font("Arial", Font.BOLD, 22));
                btn.setEnabled(!(row == 2 && col == 2));
                btn.addActionListener(e -> handlePlayerMark(r, c));
                buttons[row][col] = btn;
                boardPanel.add(btn);
            }
        }
    }

    private void handlePlayerMark(int row, int col) {
        if (gameOver) return;
        int num = numbers[row][col];
        if (num == 0) return; // Free space

        // Check if marking a wrong number
        if (!calledNumbers.contains(num)) {
            statusButton.setText("Wrong number! Game over.");
            statusButton.setForeground(Color.RED);
            autoCaller.stop();
            gameOver = true;
            disableAllButtons();
            bingoButton.setEnabled(false);
            return;
        }

        // Check if the user missed a previously called number (clicked an old called number instead of the most recent one)
        int lastCalled = getLastCalledNumber();
        if (num != lastCalled) {
            statusButton.setText("Missed number! Game over.");
            statusButton.setForeground(Color.ORANGE);
            autoCaller.stop();
            gameOver = true;
            disableAllButtons();
            bingoButton.setEnabled(false);
            return;
        }

        if (!marked[row][col]) {
            marked[row][col] = true;
            buttons[row][col].setBackground(Color.GREEN);
            buttons[row][col].setEnabled(false);
            buttons[row][col].setFont(new Font("Arial", Font.BOLD, 22));
            if (checkBingo()) {
                statusButton.setText("You have BINGO! Press the BINGO button!");
                statusButton.setForeground(new Color(0, 128, 0));
                // Do not stop the timer, wait for player to press the bingo button
            }
        }
    }

    private void handleBingoPress() {
        if (gameOver) return;
        if (checkBingo()) {
            statusButton.setText("BINGO! You won!");
            statusButton.setForeground(new Color(0, 128, 0));
            autoCaller.stop();
            gameOver = true;
            disableAllButtons();
            bingoButton.setEnabled(false);
        } else {
            statusButton.setText("False BINGO! Game over.");
            statusButton.setForeground(Color.RED);
            autoCaller.stop();
            gameOver = true;
            disableAllButtons();
            bingoButton.setEnabled(false);
        }
    }

    private int getLastCalledNumber() {
        // Only the latest called number is enabled at this point
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                if (calledNumbers.contains(numbers[i][j]) && numbers[i][j] != 0 && !marked[i][j])
                    return numbers[i][j];
        return -1;
    }

    private void disableAllButtons() {
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                buttons[i][j].setEnabled(false);
    }

    private void callNumber() {
        if (gameOver) return;
        if (calledNumbers.size() >= 75) {
            statusButton.setText("All numbers have been called! Game over.");
            statusButton.setForeground(Color.BLACK);
            autoCaller.stop();
            gameOver = true;
            disableAllButtons();
            bingoButton.setEnabled(false);
            return;
        }
        int num;
        do {
            num = new Random().nextInt(75) + 1;
        } while (calledNumbers.contains(num));
        calledNumbers.add(num);

        String colLabel = headers[(num - 1) / 15];
        statusButton.setText("Called: " + colLabel + " " + num);
        statusButton.setFont(new Font("Arial", Font.BOLD, 36));
        statusButton.setForeground(Color.BLACK);

        // Reset all unmarked buttons to normal font & enable them (except FREE)
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (numbers[i][j] != 0 && !marked[i][j]) {
                    buttons[i][j].setFont(new Font("Arial", Font.BOLD, 22));
                    buttons[i][j].setEnabled(true);
                }
            }
        }
    }

    private boolean checkBingo() {
        // Check rows
        for (int i = 0; i < SIZE; i++) {
            boolean row = true;
            for (int j = 0; j < SIZE; j++)
                if (!marked[i][j]) row = false;
            if (row) return true;
        }
        // Check columns
        for (int j = 0; j < SIZE; j++) {
            boolean col = true;
            for (int i = 0; i < SIZE; i++)
                if (!marked[i][j]) col = false;
            if (col) return true;
        }
        // Check diagonals
        boolean diag1 = true, diag2 = true;
        for (int i = 0; i < SIZE; i++) {
            if (!marked[i][i]) diag1 = false;
            if (!marked[i][SIZE - 1 - i]) diag2 = false;
        }
        return diag1 || diag2;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(BingoGame::new);
    }
}
