package isu;

import javax.swing.*;
import javax.swing.Timer;
import java.awt.*;
import java.util.*;
import java.util.List;

public class BingoGame extends JFrame {
    private static final int SIZE = 5;
    private JButton[][] buttons = new JButton[SIZE][SIZE];
    private boolean[][] marked = new boolean[SIZE][SIZE];
    private Set<Integer> calledNumbers = new HashSet<>();
    private final String[] headers = {"B", "I", "N", "G", "O"};
    private int[][] numbers = new int[SIZE][SIZE];

    private Timer preGameCountdownTimer;
    private Timer countdownTimer;
    private boolean gameOver = false;
    private JButton[] headerButtons = new JButton[SIZE];
    private JLabel callStatusBar = new JLabel("Waiting for first call...", SwingConstants.CENTER);
    private JLabel countdownStatusBar = new JLabel("", SwingConstants.CENTER);
    private JButton bingoButton = new JButton("BINGO!");
    private JButton startOverButton = new JButton("Start Over");
    private JPanel rightPanel; // for swapping buttons

    // AI Opponent fields
    private int[][] aiNumbers = new int[SIZE][SIZE];
    private boolean[][] aiMarked = new boolean[SIZE][SIZE];
    private boolean aiHasBingo = false;

    // AI Card Window
    private JFrame aiCardFrame;
    private JLabel[][] aiCardLabels = new JLabel[SIZE][SIZE];

    // Game speed presets (milliseconds)
    private static final int SPEED_BINGO = 3000;
    private static final int NORMAL_BINGO = 6000;
    private static final int TURTLE_BINGO = 9000;

    private int interval = NORMAL_BINGO;
    private int lastCalledNumber = -1;
    private String lastCalledLabel = "";
    private int countdownValue = 0;

    public BingoGame() {
        super("Bingo Game");
        setupUI();
        resetGame();
    }

    private void setupUI() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(688, 950);
        setLayout(new BorderLayout());

        JPanel boardPanel = new JPanel(new GridLayout(SIZE + 1, SIZE));
        initializeBoard(boardPanel);

        callStatusBar.setFont(new Font("Arial", Font.BOLD, 22));
        callStatusBar.setForeground(Color.BLACK);
        countdownStatusBar.setFont(new Font("Arial", Font.BOLD, 20));
        countdownStatusBar.setForeground(Color.BLUE);

        JPanel statusPanel = new JPanel(new GridLayout(2, 1));
        statusPanel.add(callStatusBar);
        statusPanel.add(countdownStatusBar);

        JPanel controlPanel = new JPanel(new BorderLayout());
        bingoButton.setFont(new Font("Arial", Font.BOLD, 26));
        bingoButton.setBackground(Color.ORANGE);
        bingoButton.setFocusPainted(false);
        bingoButton.addActionListener(e -> handleBingoPress());

        startOverButton.setFont(new Font("Arial", Font.BOLD, 22));
        startOverButton.setBackground(Color.CYAN);
        startOverButton.addActionListener(e -> resetGame());

        rightPanel = new JPanel(new BorderLayout());
        rightPanel.add(bingoButton, BorderLayout.CENTER);

        controlPanel.add(statusPanel, BorderLayout.CENTER);
        controlPanel.add(rightPanel, BorderLayout.EAST);

        add(boardPanel, BorderLayout.CENTER);
        add(controlPanel, BorderLayout.SOUTH);

        setVisible(true);
    }

    private int promptForSpeed() {
        String[] options = {"Speed Bingo (2s)", "Normal (5s)", "Turtle Style (8s)"};
        int choice = JOptionPane.showOptionDialog(
                null,
                "Choose your Bingo speed:",
                "Bingo Speed",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]
        );
        if (choice == 0) return SPEED_BINGO;
        if (choice == 1) return NORMAL_BINGO;
        if (choice == 2) return TURTLE_BINGO;
        return -1;
    }

    private void resetGame() {
        stopAllTimers();
        closeAICardWindow();

        gameOver = false;
        aiHasBingo = false;
        calledNumbers.clear();
        lastCalledNumber = -1;
        lastCalledLabel = "";

        interval = promptForSpeed();
        if (interval == -1) {
            System.exit(0);
        }

        resetPlayerBoard();
        resetAIBoard();

        setAllButtonsEnabled(false);
        swapToBingoButton();

        callStatusBar.setText("Waiting for first call...");
        callStatusBar.setForeground(Color.BLACK);
        countdownStatusBar.setText("");

        startPreGameCountdown();
    }

    private void resetPlayerBoard() {
        List<Integer>[] columnNumbers = new ArrayList[SIZE];
        for (int col = 0; col < SIZE; col++) {
            columnNumbers[col] = new ArrayList<>();
            int start = col * 15 + 1;
            for (int i = start; i < start + 15; i++) columnNumbers[col].add(i);
            Collections.shuffle(columnNumbers[col]);
        }
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                if (row == 2 && col == 2) {
                    marked[row][col] = true;
                    numbers[row][col] = 0;
                    buttons[row][col].setText("FREE");
                    buttons[row][col].setBackground(Color.GREEN);
                    buttons[row][col].setEnabled(false);
                } else {
                    numbers[row][col] = columnNumbers[col].remove(0);
                    marked[row][col] = false;
                    buttons[row][col].setText(String.valueOf(numbers[row][col]));
                    buttons[row][col].setBackground(null);
                    buttons[row][col].setEnabled(true);
                }
                buttons[row][col].setFont(new Font("Arial", Font.BOLD, 22));
            }
        }
    }

    private void resetAIBoard() {
        List<Integer>[] columnNumbers = new ArrayList[SIZE];
        for (int col = 0; col < SIZE; col++) {
            columnNumbers[col] = new ArrayList<>();
            int start = col * 15 + 1;
            for (int i = start; i < start + 15; i++) columnNumbers[col].add(i);
            Collections.shuffle(columnNumbers[col]);
        }
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                if (row == 2 && col == 2) {
                    aiNumbers[row][col] = 0;
                    aiMarked[row][col] = true;
                } else {
                    aiNumbers[row][col] = columnNumbers[col].remove(0);
                    aiMarked[row][col] = false;
                }
            }
        }
    }

    private void setAllButtonsEnabled(boolean enabled) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (!(i == 2 && j == 2)) {
                    buttons[i][j].setEnabled(enabled);
                }
            }
        }
    }

    private void initializeBoard(JPanel boardPanel) {
        for (int col = 0; col < SIZE; col++) {
            JButton btn = new JButton(headers[col]);
            btn.setFont(new Font("Arial", Font.BOLD, 26));
            btn.setBackground(Color.CYAN);
            btn.setEnabled(false);
            headerButtons[col] = btn;
            boardPanel.add(btn);
        }
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                JButton btn = new JButton("0");
                btn.setFont(new Font("Arial", Font.BOLD, 22));
                buttons[row][col] = btn;
                final int r = row, c = col;
                btn.addActionListener(e -> handlePlayerMark(r, c));
                boardPanel.add(btn);
            }
        }
    }

    private void startPreGameCountdown() {
        int[] preGameCountdownValue = {3};
        callStatusBar.setText("Game starts in: " + preGameCountdownValue[0]);
        callStatusBar.setForeground(Color.BLUE);
        countdownStatusBar.setText("");

        preGameCountdownTimer = new Timer(1000, null);
        preGameCountdownTimer.addActionListener(e -> {
            preGameCountdownValue[0]--;
            if (preGameCountdownValue[0] > 0) {
                callStatusBar.setText("Game starts in: " + preGameCountdownValue[0]);
            } else {
                preGameCountdownTimer.stop();
                callStatusBar.setText("Game started!");
                callStatusBar.setForeground(Color.BLACK);
                setAllButtonsEnabled(true);
                showAICardWindow();
                startNumberCountdown();
            }
        });
        preGameCountdownTimer.setInitialDelay(0);
        preGameCountdownTimer.start();
    }

    private void startNumberCountdown() {
        countdownValue = interval / 1000;
        updateCountdownBar();
        if (countdownTimer != null && countdownTimer.isRunning()) {
            countdownTimer.stop();
        }
        countdownTimer = new Timer(1000, e -> {
            if (gameOver) {
                countdownTimer.stop();
                return;
            }
            countdownValue--;
            if (countdownValue > 0) {
                updateCountdownBar();
            } else {
                countdownTimer.stop();
                callNumber();
                if (!gameOver) {
                    startNumberCountdown();
                }
            }
        });
        countdownTimer.setInitialDelay(0);
        countdownTimer.start();
    }

    private void updateCountdownBar() {
        countdownStatusBar.setText("Next number in: " + countdownValue + "s");
        countdownStatusBar.setForeground(Color.BLUE);
    }

    private void updateCallBar() {
        if (lastCalledNumber != -1) {
            callStatusBar.setText("Called: " + lastCalledLabel + " " + lastCalledNumber);
            callStatusBar.setForeground(Color.BLACK);
        }
    }

    private void showAICardWindow() {
        if (aiCardFrame != null) {
            aiCardFrame.dispose();
        }
        aiCardFrame = new JFrame("AI's Bingo Card");
        aiCardFrame.setSize(250, 250);
        aiCardFrame.setLayout(new GridLayout(SIZE, SIZE));
        aiCardFrame.setAlwaysOnTop(true);
        aiCardFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                String txt = aiNumbers[i][j] == 0 ? "FREE" : String.valueOf(aiNumbers[i][j]);
                aiCardLabels[i][j] = new JLabel(txt, SwingConstants.CENTER);
                aiCardLabels[i][j].setOpaque(true);
                aiCardLabels[i][j].setFont(new Font("Arial", Font.BOLD, 14));
                aiCardLabels[i][j].setBackground(Color.WHITE);
                aiCardFrame.add(aiCardLabels[i][j]);
            }
        }
        updateAICardWindow();
        aiCardFrame.setLocationRelativeTo(this);
        aiCardFrame.setLocation(this.getX() + this.getWidth(), this.getY());
        aiCardFrame.setVisible(true);
    }

    private void updateAICardWindow() {
        if (aiCardLabels[0][0] == null) return;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (aiMarked[i][j]) {
                    aiCardLabels[i][j].setBackground(Color.BLUE);
                    aiCardLabels[i][j].setForeground(Color.WHITE);
                } else {
                    aiCardLabels[i][j].setBackground(Color.WHITE);
                    aiCardLabels[i][j].setForeground(Color.BLACK);
                }
                if (aiNumbers[i][j] == 0) {
                    aiCardLabels[i][j].setBackground(Color.BLUE);
                }
                aiCardLabels[i][j].setText(aiNumbers[i][j] == 0 ? "FREE" : String.valueOf(aiNumbers[i][j]));
            }
        }
    }

    private void closeAICardWindow() {
        if (aiCardFrame != null) {
            aiCardFrame.dispose();
            aiCardFrame = null;
        }
    }

    private void handlePlayerMark(int row, int col) {
        if (gameOver) return;
        int num = numbers[row][col];
        if (num == 0) return;

        if (!calledNumbers.contains(num)) {
            endGame("Wrong number! Game over.", Color.RED);
            return;
        }
        int lastCalled = getLastCalledNumber();
        if (num != lastCalled) {
            endGame("Missed number! Game over.", Color.ORANGE);
            return;
        }
        if (!marked[row][col]) {
            marked[row][col] = true;
            buttons[row][col].setBackground(Color.GREEN);
            buttons[row][col].setEnabled(false);
            buttons[row][col].setFont(new Font("Arial", Font.BOLD, 22));
            if (checkBingo()) {
                callStatusBar.setText("You have BINGO! Press the BINGO button!");
                callStatusBar.setForeground(new Color(0, 128, 0));
            }
        }
    }

    private void handleBingoPress() {
        if (gameOver) return;
        if (checkBingo()) {
            endGame("BINGO! You won!", new Color(0, 128, 0));
        } else {
            endGame("False BINGO! Game over.", Color.RED);
        }
    }

    private void endGame(String msg, Color color) {
        callStatusBar.setText(msg);
        callStatusBar.setForeground(color);
        countdownStatusBar.setText("");
        stopAllTimers();
        gameOver = true;
        setAllButtonsEnabled(false);
        swapToStartOverButton();
        closeAICardWindow();
    }

    private void swapToBingoButton() {
        rightPanel.removeAll();
        rightPanel.add(bingoButton, BorderLayout.CENTER);
        rightPanel.revalidate();
        rightPanel.repaint();
        bingoButton.setEnabled(true);
    }

    private void swapToStartOverButton() {
        rightPanel.removeAll();
        rightPanel.add(startOverButton, BorderLayout.CENTER);
        rightPanel.revalidate();
        rightPanel.repaint();
    }

    private int getLastCalledNumber() {
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                if (calledNumbers.contains(numbers[i][j]) && numbers[i][j] != 0 && !marked[i][j])
                    return numbers[i][j];
        return -1;
    }

    private void callNumber() {
        if (gameOver) return;
        if (calledNumbers.size() >= 75) {
            endGame("All numbers have been called! Game over.", Color.BLACK);
            return;
        }
        int num;
        do {
            num = new Random().nextInt(75) + 1;
        } while (calledNumbers.contains(num));
        calledNumbers.add(num);

        lastCalledNumber = num;
        lastCalledLabel = headers[(num - 1) / 15];
        updateCallBar();

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (numbers[i][j] != 0 && !marked[i][j]) {
                    buttons[i][j].setFont(new Font("Arial", Font.BOLD, 22));
                    buttons[i][j].setEnabled(true);
                }
            }
        }
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (aiNumbers[i][j] == num) {
                    aiMarked[i][j] = true;
                }
            }
        }
        updateAICardWindow();

        if (!aiHasBingo && checkAIBingo()) {
            aiHasBingo = true;
            endGame("AI got BINGO! You lose.", Color.RED);
        }
    }

    private boolean checkBingo() {
        for (int i = 0; i < SIZE; i++) {
            boolean row = true;
            for (int j = 0; j < SIZE; j++)
                if (!marked[i][j]) row = false;
            if (row) return true;
        }
        for (int j = 0; j < SIZE; j++) {
            boolean col = true;
            for (int i = 0; i < SIZE; i++)
                if (!marked[i][j]) col = false;
            if (col) return true;
        }
        boolean diag1 = true, diag2 = true;
        for (int i = 0; i < SIZE; i++) {
            if (!marked[i][i]) diag1 = false;
            if (!marked[i][SIZE - 1 - i]) diag2 = false;
        }
        return diag1 || diag2;
    }

    private boolean checkAIBingo() {
        for (int i = 0; i < SIZE; i++) {
            boolean row = true;
            for (int j = 0; j < SIZE; j++)
                if (!aiMarked[i][j]) row = false;
            if (row) return true;
        }
        for (int j = 0; j < SIZE; j++) {
            boolean col = true;
            for (int i = 0; i < SIZE; i++)
                if (!aiMarked[i][j]) col = false;
            if (col) return true;
        }
        boolean diag1 = true, diag2 = true;
        for (int i = 0; i < SIZE; i++) {
            if (!aiMarked[i][i]) diag1 = false;
            if (!aiMarked[i][SIZE - 1 - i]) diag2 = false;
        }
        return diag1 || diag2;
    }

    private void stopAllTimers() {
        if (countdownTimer != null) countdownTimer.stop();
        if (preGameCountdownTimer != null) preGameCountdownTimer.stop();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(BingoGame::new);
    }
}
